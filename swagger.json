{
    "swagger": "2.0",
    "info": {
        "version": "0.9.0",
        "title": "WSO2 API Manager",
        "description": "This document describe a ** RESTFul API ** for wso2 **API Manager**.\n\nYou can find the source of this API definition at [here](https://github.com/hevayo/restful-apim). It was written with [swagger 2](http://swagger.io/).\n",
        "contact": {
            "name": "WSO2",
            "url": "http://wso2.com/products/api-manager/",
            "email": "architecture@wso2.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        }
    },
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "schemes": [
        "https"
    ],
    "paths": {
        "/apis": {
            "get": {
                "description": "Get a list of available APIs qualifying under a given search condition.",
                "parameters": [
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "name": "query",
                        "in": "query",
                        "description": "** Search condition **.\n\nIf no advanced attribute modifier is found search will match the given query string against API Name.\n\nYou can search in attributes by using **\"attribute:\"** modifier.\n\nEg. \"provider:wso2\" will match if the API provider is wso2.\n\nSupported attribute modifiers are [ **version, context, status, description, subcontext, doc** ]\n",
                        "type": "string"
                    },
                    {
                        "$ref": "#/parameters/Accept"
                    },
                    {
                        "$ref": "#/parameters/If-None-Match"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK. List of APIs is returned.",
                        "schema": {
                            "title": "APIList",
                            "properties": {
                                "count": {
                                    "type": "string"
                                },
                                "next": {
                                    "type": "string",
                                    "description": "Link for next page. Empty if no more APIs to be returned."
                                },
                                "previous": {
                                    "type": "string",
                                    "description": "Link for previous page. Empty if current page is first page."
                                },
                                "list": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/API"
                                    }
                                }
                            }
                        },
                        "headers": {
                            "Content-Type": {
                                "description": "The content type of the body.",
                                "type": "string"
                            },
                            "ETag": {
                                "description": "Entity Tag of the response resource. Used by caches, or in conditional requests.",
                                "type": "string"
                            }
                        }
                    },
                    "304": {
                        "description": "Not Modified. Empty body because the client has already the latest version of the requested resource."
                    },
                    "406": {
                        "description": "Not Acceptable. The requested media type is not supported",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new API",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "API object that needs to be added",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/API"
                        }
                    },
                    {
                        "$ref": "#/parameters/Content-Type"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created. Successful response with the newly created object as entity in the body. Location header contains URL of newly created entity.",
                        "schema": {
                            "$ref": "#/definitions/API"
                        },
                        "headers": {
                            "Location": {
                                "description": "The URL of the newly created resource.",
                                "type": "string"
                            },
                            "Content-Type": {
                                "description": "The content type of the body.",
                                "type": "string"
                            },
                            "ETag": {
                                "description": "Entity Tag of the response resource. Used by caches, or in conditional request",
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. Invalid request or validation error.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "415": {
                        "description": "Unsupported Media Type. The entity of the request was in a not supported format.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/apis/{apiId}": {
            "parameters": [
                {
                    "$ref": "#/parameters/apiId"
                }
            ],
            "get": {
                "description": "Get details of an API",
                "parameters": [
                    {
                        "$ref": "#/parameters/Accept"
                    },
                    {
                        "$ref": "#/parameters/If-None-Match"
                    },
                    {
                        "$ref": "#/parameters/If-Modified-Since"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK Requested API is returned",
                        "headers": {
                            "Content-Type": {
                                "description": "The content type of the body.",
                                "type": "string"
                            },
                            "ETag": {
                                "description": "Entity Tag of the response resource. Used by caches, or in conditional requests.",
                                "type": "string"
                            },
                            "Last-Modified": {
                                "description": "Date and time the resource has been modifed the last time. Used by caches, or in conditional requests.",
                                "type": "string"
                            }
                        },
                        "schema": {
                            "$ref": "#/definitions/API"
                        }
                    },
                    "304": {
                        "description": "Not Modified. Empty body because the client has already the latest version of the requested resource."
                    },
                    "404": {
                        "description": "Not Found. Requested API does not exist.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "406": {
                        "description": "Not Acceptable. The requested media type is not supported",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "description": "Update an existing API",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "API object that needs to be added",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/API"
                        }
                    },
                    {
                        "$ref": "#/parameters/Content-Type"
                    },
                    {
                        "$ref": "#/parameters/If-Match"
                    },
                    {
                        "$ref": "#/parameters/If-Unmodified-Since"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK. Successful response with updated API object",
                        "schema": {
                            "$ref": "#/definitions/API"
                        },
                        "headers": {
                            "Location": {
                                "description": "The URL of the newly created resource.",
                                "type": "string"
                            },
                            "Content-Type": {
                                "description": "The content type of the body.",
                                "type": "string"
                            },
                            "ETag": {
                                "description": "Entity Tag of the response resource. Used by caches, or in conditional request",
                                "type": "string"
                            },
                            "Last-Modified": {
                                "description": "Date and time the resource has been modifed the last time. Used by caches, or in conditional requests.",
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. Invalid request or validation error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The request must be conditional but no condition has been specified.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found. The resource to be updated does not exist.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "412": {
                        "description": "Precondition Failed. The request has not been performed because one of the preconditions is not met.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete an existing API",
                "parameters": [
                    {
                        "$ref": "#/parameters/If-Match"
                    },
                    {
                        "$ref": "#/parameters/If-Unmodified-Since"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK. Resource successfully deleted."
                    },
                    "403": {
                        "description": "Forbidden. The request must be conditional but no condition has been specified.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found. Resource to be deleted does not exist.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "412": {
                        "description": "Precondition Failed. The request has not been performed because one of the preconditions is not met.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/apis/copy-api": {
            "post": {
                "parameters": [
                    {
                        "name": "newVersion",
                        "description": "Version of the new API.",
                        "type": "string",
                        "in": "query"
                    },
                    {
                        "$ref": "#/parameters/apiId-Q"
                    }
                ],
                "description": "Create a new API by copying an existing API",
                "responses": {
                    "201": {
                        "description": "Created. Successful response with the newly created API as entity in the body. Location header contains URL of newly created API.",
                        "headers": {
                            "Location": {
                                "description": "The URL of the newly created API.",
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. Invalid request or validation error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found. API to copy does not exist.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/apis/change-lifecycle": {
            "post": {
                "description": "Change the lifecycle of an API",
                "parameters": [
                    {
                        "name": "newState",
                        "description": "New lifecycle state of the API.",
                        "type": "string",
                        "in": "query"
                    },
                    {
                        "$ref": "#/parameters/apiId-Q"
                    },
                    {
                        "$ref": "#/parameters/If-Match"
                    },
                    {
                        "$ref": "#/parameters/If-Unmodified-Since"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK. Lifecycle changed successfully.",
                        "headers": {
                            "ETag": {
                                "description": "Entity Tag of the changed API. Used by caches, or in conditional request",
                                "type": "string"
                            },
                            "Last-Modified": {
                                "description": "Date and time the API lifecycle has been modified the last time. Used by caches, or in conditional requests.",
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. Invalid request or validation error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found. Requested API does not exist.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "412": {
                        "description": "Precondition Failed. The request has not been performed because one of the preconditions is not met.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/apis/{apiId}/documents": {
            "parameters": [
                {
                    "$ref": "#/parameters/apiId"
                }
            ],
            "get": {
                "description": "Get a list of documents belonging to an API.",
                "parameters": [
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "name": "query",
                        "in": "query",
                        "description": "Search condition.",
                        "type": "string"
                    },
                    {
                        "$ref": "#/parameters/Accept"
                    },
                    {
                        "$ref": "#/parameters/If-None-Match"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK. Document list is returned.",
                        "schema": {
                            "title": "DocumentList",
                            "properties": {
                                "count": {
                                    "type": "string"
                                },
                                "next": {
                                    "type": "string",
                                    "description": "Link to next page. Empty if no more documents are to be returned."
                                },
                                "previous": {
                                    "type": "string",
                                    "description": "Link to previous page. Empty if current page is first page."
                                },
                                "list": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/Document"
                                    }
                                }
                            }
                        },
                        "headers": {
                            "Content-Type": {
                                "description": "The content type of the body.",
                                "type": "string"
                            },
                            "ETag": {
                                "description": "Entity Tag of the response resource. Used by caches, or in conditional requests.",
                                "type": "string"
                            }
                        }
                    },
                    "304": {
                        "description": "Not Modified. Empty body because the client has already the latest version of the requested resource."
                    },
                    "404": {
                        "description": "Not Found. Requested API does not exist.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "406": {
                        "description": "Not Acceptable. The requested media type is not supported",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "description": "Add a new document to an API",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Document object that needs to be added",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Document"
                        }
                    },
                    {
                        "$ref": "#/parameters/Content-Type"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created. Successful response with the newly created Document object as entity in the body. Location header contains URL of newly added document.",
                        "schema": {
                            "$ref": "#/definitions/Document"
                        },
                        "headers": {
                            "Location": {
                                "description": "Location to the newly created Document.",
                                "type": "string"
                            },
                            "Content-Type": {
                                "description": "The content type of the body.",
                                "type": "string"
                            },
                            "ETag": {
                                "description": "Entity Tag of the response resource. Used by caches, or in conditional request",
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. Invalid request or validation error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "415": {
                        "description": "Unsupported media type. The entity of the request was in a not supported format."
                    }
                }
            }
        },
        "/apis/{apiId}/documents/{documentId}": {
            "parameters": [
                {
                    "$ref": "#/parameters/apiId"
                },
                {
                    "name": "documentId",
                    "in": "path",
                    "description": "Document Id",
                    "required": true,
                    "type": "number",
                    "format": "integer"
                }
            ],
            "get": {
                "description": "Get a particular document associated with an API.",
                "parameters": [
                    {
                        "$ref": "#/parameters/Accept"
                    },
                    {
                        "$ref": "#/parameters/If-None-Match"
                    },
                    {
                        "$ref": "#/parameters/If-Modified-Since"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK. Document returned.",
                        "schema": {
                            "$ref": "#/definitions/API"
                        },
                        "headers": {
                            "Content-Type": {
                                "description": "The content type of the body.",
                                "type": "string"
                            },
                            "ETag": {
                                "description": "Entity Tag of the response resource. Used by caches, or in conditional requests.",
                                "type": "string"
                            },
                            "Last-Modified": {
                                "description": "Date and time the resource has been modifed the last time. Used by caches, or in conditional reuquests.",
                                "type": "string"
                            }
                        }
                    },
                    "304": {
                        "description": "Not Modified. Empty body because the client has already the latest version of the requested resource."
                    },
                    "404": {
                        "description": "Not Found. Requested Document does not exist.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "406": {
                        "description": "Not Acceptable. The requested media type is not supported",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "description": "Update document details.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Document object that needs to be added",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Document"
                        }
                    },
                    {
                        "$ref": "#/parameters/Content-Type"
                    },
                    {
                        "$ref": "#/parameters/If-Match"
                    },
                    {
                        "$ref": "#/parameters/If-Unmodified-Since"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK. Document updated",
                        "schema": {
                            "$ref": "#/definitions/Document"
                        },
                        "headers": {
                            "Location": {
                                "description": "The URL of the updated document.",
                                "type": "string"
                            },
                            "Content-Type": {
                                "description": "The content type of the body.",
                                "type": "string"
                            },
                            "ETag": {
                                "description": "Entity Tag of the response resource. Used by caches, or in conditional request",
                                "type": "string"
                            },
                            "Last-Modified": {
                                "description": "Date and time the resource has been modifed the last time. Used by caches, or in conditional reuquests.",
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. Invalid request or validation error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found. The resource to be updated does not exist.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "412": {
                        "description": "Precondition Failed. The request has not been performed because one of the preconditions is not met.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a document of an API",
                "parameters": [
                    {
                        "$ref": "#/parameters/If-Match"
                    },
                    {
                        "$ref": "#/parameters/If-Unmodified-Since"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK. Resource successfully deleted."
                    },
                    "404": {
                        "description": "Not Found. Resource to be deleted does not exist.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "412": {
                        "description": "Precondition Failed. The request has not been performed because one of the preconditions is not met.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/applications": {
            "get": {
                "description": "Get a list of applications",
                "parameters": [
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/Accept"
                    },
                    {
                        "$ref": "#/parameters/If-None-Match"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK. Application list returned.",
                        "schema": {
                            "title": "ApplicationList",
                            "properties": {
                                "count": {
                                    "type": "string"
                                },
                                "next": {
                                    "type": "string",
                                    "description": "Link to next page. Empty if no more applications are to be returned."
                                },
                                "previous": {
                                    "type": "string",
                                    "description": "Link to previous page. Empty if current page is first page."
                                },
                                "list": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/Application"
                                    }
                                }
                            }
                        },
                        "headers": {
                            "Content-Type": {
                                "description": "The content type of the body.",
                                "type": "string"
                            },
                            "ETag": {
                                "description": "Entity Tag of the response resource. Used by caches, or in conditional requests.",
                                "type": "string"
                            }
                        }
                    },
                    "304": {
                        "description": "Not Modified. Empty body because the client has already the latest version of the requested resource."
                    },
                    "400": {
                        "description": "Bad Request. Invalid request or validation error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "406": {
                        "description": "Not Acceptable. The requested media type is not supported",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new application",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Application object that is to be created",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Application"
                        }
                    },
                    {
                        "$ref": "#/parameters/Content-Type"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created. Successful response with the newly created object as entity in the body. Location header contains URL of newly created entity.",
                        "schema": {
                            "$ref": "#/definitions/Application"
                        },
                        "headers": {
                            "Location": {
                                "description": "Location of the newly created Application.",
                                "type": "string"
                            },
                            "Content-Type": {
                                "description": "The content type of the body.",
                                "type": "string"
                            },
                            "ETag": {
                                "description": "Entity Tag of the response resource. Used by caches, or in conditional request",
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. Invalid request or validation error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "415": {
                        "description": "Unsupported media type. The entity of the request was in a not supported format.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/applications/{applicationId}": {
            "get": {
                "description": "Get application details",
                "parameters": [
                    {
                        "$ref": "#/parameters/Accept"
                    },
                    {
                        "$ref": "#/parameters/If-None-Match"
                    },
                    {
                        "$ref": "#/parameters/If-Modified-Since"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK. Application returned.",
                        "schema": {
                            "$ref": "#/definitions/Application"
                        },
                        "headers": {
                            "Content-Type": {
                                "description": "The content type of the body.",
                                "type": "string"
                            },
                            "ETag": {
                                "description": "Entity Tag of the response resource. Used by caches, or in conditional requests.",
                                "type": "string"
                            },
                            "Last-Modified": {
                                "description": "Date and time the resource has been modifed the last time. Used by caches, or in conditional reuquests.",
                                "type": "string"
                            }
                        }
                    },
                    "304": {
                        "description": "Not Modified. Empty body because the client has already the latest version of the requested resource."
                    },
                    "404": {
                        "description": "Requested application does not exist.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "406": {
                        "description": "Not Acceptable. The requested media type is not supported",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "description": "Update application details",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Application object that needs to be updated",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Application"
                        }
                    },
                    {
                        "$ref": "#/parameters/Content-Type"
                    },
                    {
                        "$ref": "#/parameters/If-Match"
                    },
                    {
                        "$ref": "#/parameters/If-Unmodified-Since"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK. Application updated.",
                        "schema": {
                            "$ref": "#/definitions/Application"
                        },
                        "headers": {
                            "Location": {
                                "description": "The URL of the newly created resource.",
                                "type": "string"
                            },
                            "Content-Type": {
                                "description": "The content type of the body.",
                                "type": "string"
                            },
                            "ETag": {
                                "description": "Entity Tag of the response resource. Used by caches, or in conditional request",
                                "type": "string"
                            },
                            "Last-Modified": {
                                "description": "Date and time the resource has been modifed the last time. Used by caches, or in conditional reuquests.",
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. Invalid request or validation error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found. The resource to be updated does not exist.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "412": {
                        "description": "Precondition Failed. The request has not been performed because one of the preconditions is not met.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "description": "Remove an application",
                "parameters": [
                    {
                        "$ref": "#/parameters/If-Match"
                    },
                    {
                        "$ref": "#/parameters/If-Unmodified-Since"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK. Resource successfully deleted."
                    },
                    "404": {
                        "description": "Not Found. Resource to be deleted does not exist.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "412": {
                        "description": "Precondition Failed. The request has not been performed because one of the preconditions is not met.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/parameters/applicationId"
                }
            ]
        },
        "/subscriptions": {
            "get": {
                "description": "Get subscription list",
                "parameters": [
                    {
                        "$ref": "#/parameters/Accept"
                    },
                    {
                        "$ref": "#/parameters/If-None-Match"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK. Subscription list returned.",
                        "schema": {
                            "title": "SubscriptionList",
                            "properties": {
                                "count": {
                                    "type": "string"
                                },
                                "next": {
                                    "type": "string",
                                    "description": "Link for next page. Empty if no more subscriptions are to be returned."
                                },
                                "previous": {
                                    "type": "string",
                                    "description": "Link for previous page. Empty if current page is first page."
                                },
                                "list": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/Subscription"
                                    }
                                }
                            }
                        },
                        "headers": {
                            "Content-Type": {
                                "description": "The content type of the body.",
                                "type": "string"
                            },
                            "ETag": {
                                "description": "Entity Tag of the response resource. Used by caches, or in conditional requests.",
                                "type": "string"
                            }
                        }
                    },
                    "304": {
                        "description": "Not Modified. Empty body because the client has already the latest version of the requested resource."
                    },
                    "406": {
                        "description": "Not Acceptable. The requested media type is not supported",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "description": "Add a new subscription",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Subscription object that should to be added",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Subscription"
                        }
                    },
                    {
                        "$ref": "#/parameters/Content-Type"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created. Successful response with the newly created object as entity in the body. Location header contains URL of newly created entity.",
                        "schema": {
                            "$ref": "#/definitions/Subscription"
                        },
                        "headers": {
                            "Location": {
                                "description": "Location to the newly created subscription.",
                                "type": "string"
                            },
                            "Content-Type": {
                                "description": "The content type of the body.",
                                "type": "string"
                            },
                            "ETag": {
                                "description": "Entity Tag of the response resource. Used by caches, or in conditional request",
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. Invalid request or validation error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "415": {
                        "description": "Unsupported media type. The entity of the request was in a not supported format."
                    }
                }
            }
        },
        "/subscriptions/{subscriptionId}": {
            "parameters": [
                {
                    "$ref": "#/parameters/subscriptionId"
                }
            ],
            "get": {
                "description": "Get subscription details",
                "parameters": [
                    {
                        "$ref": "#/parameters/Accept"
                    },
                    {
                        "$ref": "#/parameters/If-None-Match"
                    },
                    {
                        "$ref": "#/parameters/If-Modified-Since"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK. Subscription returned",
                        "schema": {
                            "$ref": "#/definitions/Subscription"
                        },
                        "headers": {
                            "Content-Type": {
                                "description": "The content type of the body.",
                                "type": "string"
                            },
                            "ETag": {
                                "description": "Entity Tag of the response resource. Used by caches, or in conditional requests.",
                                "type": "string"
                            },
                            "Last-Modified": {
                                "description": "Date and time the resource has been modifed the last time. Used by caches, or in conditional reuquests.",
                                "type": "string"
                            }
                        }
                    },
                    "304": {
                        "description": "Not Modified. Empty body because the client has already the latest version of the requested resource."
                    },
                    "404": {
                        "description": "Not Found. Requested Subscription does not exist.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "406": {
                        "description": "Not Acceptable. The requested media type is not supported",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "description": "Update subscription details",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Subscription object that needs to be modified",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Subscription"
                        }
                    },
                    {
                        "$ref": "#/parameters/Content-Type"
                    },
                    {
                        "$ref": "#/parameters/If-Match"
                    },
                    {
                        "$ref": "#/parameters/If-Unmodified-Since"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK. Subscription updated.",
                        "schema": {
                            "$ref": "#/definitions/Subscription"
                        },
                        "headers": {
                            "Location": {
                                "description": "The URL of the newly created resource.",
                                "type": "string"
                            },
                            "Content-Type": {
                                "description": "The content type of the body.",
                                "type": "string"
                            },
                            "ETag": {
                                "description": "Entity Tag of the response resource. Used by caches, or in conditional request",
                                "type": "string"
                            },
                            "Last-Modified": {
                                "description": "Date and time the resource has been modifed the last time. Used by caches, or in conditional reuquests.",
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. Invalid request or validation error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found. The resource to be updated does not exist.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "412": {
                        "description": "Precondition Failed. The request has not been performed because one of the preconditions is not met.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "description": "Remove subscription",
                "parameters": [
                    {
                        "$ref": "#/parameters/If-Match"
                    },
                    {
                        "$ref": "#/parameters/If-Unmodified-Since"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK. Resource successfully deleted."
                    },
                    "404": {
                        "description": "Not Found. Resource to be deleted does not exist.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "412": {
                        "description": "Precondition Failed. The request has not been performed because one of the preconditions is not met.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/block-subscription": {
            "post": {
                "parameters": [
                    {
                        "$ref": "#/parameters/subscriptionId-Q"
                    },
                    {
                        "$ref": "#/parameters/If-Match"
                    },
                    {
                        "$ref": "#/parameters/If-Unmodified-Since"
                    }
                ],
                "description": "Block a subscription.",
                "responses": {
                    "200": {
                        "description": "OK. Subscription was blocked successfully.",
                        "headers": {
                            "ETag": {
                                "description": "Entity Tag of the blocked subscription. Used by caches, or in conditional request",
                                "type": "string"
                            },
                            "Last-Modified": {
                                "description": "Date and time the subscription has been blocked. Used by caches, or in conditional requests.",
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. Invalid request or validation error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found. Requested subscription does not exist.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "412": {
                        "description": "Precondition Failed. The request has not been performed because one of the preconditions is not met.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/tiers": {
            "get": {
                "description": "Get available tiers",
                "parameters": [
                    {
                        "$ref": "#/parameters/Accept"
                    },
                    {
                        "$ref": "#/parameters/If-None-Match"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK. List of tiers returned.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Tier"
                            }
                        },
                        "headers": {
                            "Content-Type": {
                                "description": "The content type of the body.",
                                "type": "string"
                            },
                            "ETag": {
                                "description": "Entity Tag of the response resource. Used by caches, or in conditional requests.",
                                "type": "string"
                            }
                        }
                    },
                    "304": {
                        "description": "Not Modified. Empty body because the client has already the latest version of the requested resource."
                    },
                    "406": {
                        "description": "Not Acceptable. The requested media type is not supported",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/update-tier-permission": {
            "post": {
                "parameters": [
                    {
                        "in": "query",
                        "name": "tierName",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "permissions",
                        "schema": {
                            "$ref": "#/definitions/TierPermission"
                        }
                    },
                    {
                        "$ref": "#/parameters/Content-Type"
                    },
                    {
                        "$ref": "#/parameters/If-Match"
                    },
                    {
                        "$ref": "#/parameters/If-Unmodified-Since"
                    }
                ],
                "description": "Update tier permission",
                "responses": {
                    "200": {
                        "description": "OK. Successfully updated tier permissions",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Tier"
                            }
                        },
                        "headers": {
                            "ETag": {
                                "description": "Entity Tag of the modified tier. Used by caches, or in conditional request",
                                "type": "string"
                            },
                            "Last-Modified": {
                                "description": "Date and time the tier has been modified. Used by caches, or in conditional requests.",
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. Invalid request or validation error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. User not allowed to update tier permission",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Error"
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden. The request must be conditional but no condition has been specified.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found. Requested tier does not exist.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "412": {
                        "description": "Precondition Failed. The request has not been performed because one of the preconditions is not met.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }
    },
    "parameters": {
        "apiId": {
            "name": "apiId",
            "in": "path",
            "description": "**API ID** consisting of the name of the API, the identifier of the version and of the provider of the API. \nShould be formatted as **name/version/provider**\n",
            "required": true,
            "type": "string"
        },
        "apiId-Q": {
            "name": "apiId",
            "in": "query",
            "description": "**API ID** consisting of the name of the API, the identifier of the version and of the provider of the API. \nShould be formatted as **name/version/provider**\n",
            "required": true,
            "type": "string"
        },
        "applicationId": {
            "name": "applicationId",
            "in": "path",
            "description": "Application Id",
            "required": true,
            "type": "number",
            "format": "integer"
        },
        "subscriptionId": {
            "name": "subscriptionId",
            "in": "path",
            "description": "Subscription Id",
            "required": true,
            "type": "number",
            "format": "integer"
        },
        "subscriptionId-Q": {
            "name": "subscriptionId",
            "in": "query",
            "description": "Subscription Id",
            "required": true,
            "type": "number",
            "format": "integer"
        },
        "limit": {
            "name": "limit",
            "in": "query",
            "description": "Maximum size of API array to return.",
            "default": 25,
            "required": true,
            "type": "number",
            "format": "integer"
        },
        "offset": {
            "name": "offset",
            "in": "query",
            "description": "Starting point of the item list.",
            "default": 0,
            "required": true,
            "type": "number",
            "format": "integer"
        },
        "Accept": {
            "name": "Accept",
            "in": "header",
            "description": "Media types acceptable for the response. Should denote XML or JSON, default is JSON.",
            "type": "string"
        },
        "Content-Type": {
            "name": "Content-Type",
            "in": "header",
            "description": "Media type of the entity in the request body. Should denote XML or JSON, default is JSON.",
            "type": "string"
        },
        "If-None-Match": {
            "name": "If-None-Match",
            "in": "header",
            "description": "Validator for conditional requests; based on ETag.",
            "type": "string"
        },
        "If-Modified-Since": {
            "name": "If-Modified-Since",
            "in": "header",
            "description": "Validator for conditional requests; based on Last Modified header.",
            "type": "string"
        },
        "If-Match": {
            "name": "If-Match",
            "in": "header",
            "description": "Validator for conditional requests; based on ETag.",
            "type": "string"
        },
        "If-Unmodified-Since": {
            "name": "If-Unmodified-Since",
            "in": "header",
            "description": "Validator for conditional requests; based on Last Modified header.",
            "type": "string"
        }
    },
    "definitions": {
        "API": {
            "title": "API object",
            "required": [
                "name",
                "context",
                "version"
            ],
            "properties": {
                "name": {
                    "type": "string"
                },
                "context": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                },
                "provider": {
                    "type": "string"
                },
                "swagger": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "responseCaching": {
                    "type": "string"
                },
                "isDefaultVersion": {
                    "type": "boolean"
                },
                "transport": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "enum": [
                            "http",
                            "https"
                        ]
                    }
                },
                "tier": {
                    "type": "string"
                },
                "visibility": {
                    "type": "string",
                    "enum": [
                        "PUBLIC",
                        "PRIVATE"
                    ]
                },
                "endpoint": {
                    "properties": {
                        "type": {
                            "type": "string",
                            "enum": [
                                "http",
                                "address",
                                "wsdl",
                                "failover",
                                "load_balanced"
                            ]
                        },
                        "production": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "sandbox": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "Application": {
            "title": "Application",
            "required": [
                "applicationId"
            ],
            "properties": {
                "applicationId": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "throttlingTier": {
                    "type": "string"
                },
                "callbackUrl": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "consumerKey": {
                    "type": "string"
                },
                "consumerSecret": {
                    "type": "string"
                },
                "accessToken": {
                    "type": "string"
                }
            }
        },
        "Document": {
            "title": "Document",
            "required": [
                "documentId"
            ],
            "properties": {
                "documentId": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "summary": {
                    "type": "string"
                },
                "content": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "Tier": {
            "title": "Tier",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string"
                },
                "rate": {
                    "type": "string"
                },
                "roles": {
                    "type": "string"
                }
            }
        },
        "TierPermission": {
            "title": "tierPermission",
            "properties": {
                "enableAccess": {
                    "type": "string"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "Subscription": {
            "title": "Subscription",
            "required": [
                "subscriptionId"
            ],
            "properties": {
                "subscriptionId": {
                    "type": "number"
                },
                "applicationId": {
                    "type": "string"
                },
                "apiId": {
                    "type": "string"
                },
                "tier": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "Error": {
            "title": "Error object returned with 4XX HTTP status",
            "required": [
                "code",
                "message"
            ],
            "properties": {
                "code": {
                    "type": "integer",
                    "format": "int64"
                },
                "message": {
                    "type": "string",
                    "description": "Error message."
                },
                "description": {
                    "type": "string",
                    "description": "A detail description about the error message."
                },
                "moreInfo": {
                    "type": "string",
                    "description": "Preferably an url with more details about the error."
                },
                "error": {
                    "type": "array",
                    "description": "If there are more than one error list them out. Ex. list out validation errors by each field.",
                    "items": {
                        "$ref": "#/definitions/ErrorListItem"
                    }
                }
            }
        },
        "ErrorListItem": {
            "title": "Description of individual errors that may have occurred during a request.",
            "required": [
                "code",
                "message"
            ],
            "properties": {
                "code": {
                    "type": "integer",
                    "format": "int64"
                },
                "message": {
                    "type": "string",
                    "description": "Description about individual errors occurred"
                }
            }
        }
    }
}